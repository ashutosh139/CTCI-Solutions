//Find Longest common subsequence and Print it.

class Solution {
public:
    int maximum(int a, int b){
        return a>b?a:b;
    }
    int longestCommonSubsequence(string text1, string text2) {
       int m=text1.length();
        int n=text2.length();
        int lcs[m+1][n+1];
        
        if(m==0||n==0){
            return 0;
        }
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0||j==0){
                    lcs[i][j]=0;
                }
                else if(text1[i-1]==text2[j-1]){
                    lcs[i][j]=lcs[i-1][j-1]+1;
                }
                    else{
                        lcs[i][j]=maximum(lcs[i-1][j],lcs[i][j-1]);
                    }
                }
        }
        /*for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                cout<<lcs[i][j]<<" ";
            }
            cout<<endl;
        }*/
        
        int index=lcs[m][n];
        char ans[index+1];
        ans[index]='\0';
        int i=m,j=n;
        while(i>0 && j>0){
            if(text1[i-1]==text2[j-1]){
                ans[index-1]=text1[i-1];
                i--;j--;index--;
            }
            else if(lcs[i-1][j]>lcs[i][j-1]){
                i--;
            }
            else j--;
        }
       cout<<ans;
        
        
    
       return lcs[m][n];
    }
};
